def env = new Properties()
def envFile = new File(rootDir.parentFile, ".env") // 🔥 самый надежный способ
if (envFile.exists()) {
    println "✅ .env найден по пути: ${envFile}"
    envFile.withInputStream { stream -> env.load(stream) }
} else {
    println "❌ .env НЕ найден по пути: ${envFile}"
}

apply plugin: 'com.android.application'

def buildTimestamp = new Date().format("yyyyMMddHH")

android {
    namespace "com.polandgroup.polandshopprice"
    compileSdk rootProject.ext.compileSdkVersion
    defaultConfig {
        applicationId "com.polandgroup.polandshopprice"
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode Integer.parseInt(buildTimestamp)
        versionName "v${buildTimestamp}"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        aaptOptions {
            ignoreAssetsPattern '!.svn:!.git:!.ds_store:!*.scc:.*:!CVS:!thumbs.db:!picasa.ini:!*~'
        }
    }
    signingConfigs {
        release {
            storeFile file(env["RELEASE_STORE_FILE"])
            storePassword env["RELEASE_STORE_PASSWORD"]
            keyAlias env["RELEASE_KEY_ALIAS"]
            keyPassword env["RELEASE_KEY_PASSWORD"]
        }
    }

        buildTypes {
            release {
                signingConfig signingConfigs.release  // Указываем использовать конфигурацию подписи
                minifyEnabled false
                proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            }
        }

        applicationVariants.all { variant ->
            variant.outputs.all { output ->
                def version = variant.versionName
                def timestamp = new Date().format("yyyyMMdd_HHmm")

                if (output.name.endsWith('.apk')) {
                    def newName = "PolandShopPrice-${version}-${timestamp}.apk"
                    println("✔ Переименовываю APK: $newName")
                    output.outputFileName.set(newName)
                }
            }
        }

}

repositories {
    flatDir{
        dirs '../capacitor-cordova-android-plugins/src/main/libs', 'libs'
    }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation "androidx.appcompat:appcompat:$androidxAppCompatVersion"
    implementation "androidx.coordinatorlayout:coordinatorlayout:$androidxCoordinatorLayoutVersion"
    implementation "androidx.core:core-splashscreen:$coreSplashScreenVersion"
    implementation project(':capacitor-android')
    testImplementation "junit:junit:$junitVersion"
    androidTestImplementation "androidx.test.ext:junit:$androidxJunitVersion"
    androidTestImplementation "androidx.test.espresso:espresso-core:$androidxEspressoCoreVersion"
    implementation project(':capacitor-cordova-android-plugins')
}

apply from: 'capacitor.build.gradle'

try {
    def servicesJSON = file('google-services.json')
    if (servicesJSON.text) {
        apply plugin: 'com.google.gms.google-services'
    }
} catch(Exception e) {
    logger.info("google-services.json not found, google-services plugin not applied. Push Notifications won't work")
}
